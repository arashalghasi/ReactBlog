after creating the folder we initialize this folder as a new NPM package
npm init -y
then we install the express package
so to use modern javaScript syntax such as the import and export syntax we need to install babel or just going to the package.json file and 
add a line of code "type" : "module",

after having the app object we can define different endpoints and what we want our server to do when one of those endpoints recieves a request
we can use the postman application to test our server
different types of the request:
1- GET -> is used to load information such as an article content or the user's information
2- POST -> is used to create sort of new resource on the server.
3- PUT -> is usually used to update data on the server.
4- ...

one of the resones that we use express is that with the app object we can clearly and easily say which input which type of request is using.
when we use the post as the response we want to work with the information in the body and to work correctly with it in a express app we must 
add a middleware to the app which is basically just extra functionality that the sever automaticaly excecute app.use(express.json());
this is the best way to add information to our request

to fix the problem that every time we should restart our server with the changes of the server.js file there is package called nodemon that fixes
out problem -> npm install nodemon and we want to use this package only in the development not in the production phase so -> npm install nodemon --save-dev
we can use start our sever by npm nodemon "serverfile" and to make this command easier we can go to the package.json file and create a Script
and we can add this in the script section -> "dev": "npx nodemon src/server.js", -> from now we can just type -> npm run dev


mongodb why? is a non relational database which we can push javaScript data into it without the worry how the data is formatted.
to install mongo db see the mongo db documentation in the case of the windows download the windows version and add the path of bin file to the 
windows variables that is not very difficult, I KNOW YOU CAN DO IT:

to have a local db in a folder we can start the db engin by -> mongod --dbpath "\mongo-db-data\"
and then in another bash we can connect to it via -> mongo ---> it opens a terminal that you can write your commands ( maybe your queries who gives a fuck just learn it)


to create a database -> use "the name of the database"

now we insert the data to our local database so - > db.articles.insertMany([
    {
        name: 'learn-node',
        upvotes: 0,
        comments: [],

    },
    {
        name: 'learn-react',
        upvotes: 0,
        comments: [],

    },
    {
        name: 'mongodb',
        upvotes: 0,
        comments: [],

    },
])

To print the data inserted -> db.articles.find() OR db.articles.find({name : 'learn-node'}).pretty() 
name : 'learn-node' is called query object

to interact with the db we need to install the mongodb driver package to our project -> npm install mongodb
this package is allow us to do the same thing inside our node.js code as we did in mongo shell

MongoClinet help us to connect to the database const client = new MongoClient('mongodb://127.0.0.1:27017');

    loads the articles from the db
    const articles = await db.collection('articles').findOne({articleId});

    to update :
        const article = await db.collection('articles').updateOne({name : articleId}, {
        $inc : {upvotes : 1}
    });


to connect to the db and make server.js smaller we will create a file db.js

import{db, connectToDd} from './db.js'; we need to include .js here as long as we added type ="module"

connectToDd(()=>{

    app.listen(PORT, () => {
        console.log(`The server is listening on port ${PORT}`)
    });
    
})

in this case the server will not start up untill we successfully connected to the database

we need to firebase to our backend as well
we want to incorprate firebase auth into our node js server so that we can do things so we can make sure the suers can not upvote an article
mroe than one time  and make sure the users can add comments just when they are logged in
so we need to create a private in firebase that our server can use to connect to firebase auth from our server.

then we need use the credentials to do the server to connect to the firebase/auth -> npm install firebase-admin

admin.initializeApp({
    credential: admin.credential.cert(credentials),
})

here we are saying firebase-admin what credentials should use to connect to the firebase auth

so after connecting to firebase we should protect our endpoint to make sure the user can upvote once and can add comment after loggen in
so from client side we need an auth token which will come by axios with the request -> the auth token is just how the front end proves
that the user is logged in and who they are

we need the expres middleware to automaticaly load the information whenever we recieve a requent to our server
so this is how to make a middleware in express app.use((req,res,next))
the next callback function does when we are done processing things in the the middleware and we want the program to go on to actual route
handlers 

as long as we made the middleware and we have the user in every endpoint we can have the id of the user by const {uid}  = res.user;

the upvote endpoint and comment endpoint have the same criteria which is if the users is not logged in the user can not upvote and add comment
so we need to add a new middleware


You do not believe I was doing 1 hour debuggin for req.headers; it was req.header; just an s porca miseria

So we add the build to backend app.use(express.static(path.join(__dirname, '../build')));
because we added type module to package.json  __dirname will not work by default

we need to add the route handler  like frontend to the backend  using a regular expression as well so 
app.get(/^(?!\/api).+/,(req,res)=>{
    res.sendFile(path.join(__dirname, '../build/index.html'));
})

so all these is for when a browser send a request to our sever that is not going to api route we are going to send back the index.html
which will take care of loading our react script and rendering our react app

now we should run the server and be able to access our react app simply by sending a request to our server

const PORT = process.env.PORT || 8000;
this will allow the hosting platform to specify the port

before publishing we should how mongo db  because we are hosting mongo db localy so we use mongodb atlas
after creating a project in mongoatlas we sould make an environmental file .env

in order to automaticaly load the environment variables from .env file -> npm install dotenv

app.yaml file just going to tell google cloud what sort of environment oru project needs to run in and it is also a good place
to specify environment variables.

so after installing google cloud cli
we need connect to it -> gcloud auth login
we need to choose the project --> gcloud config set project "project name"
to deploy it ---> gcloud app deploy